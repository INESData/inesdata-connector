openapi: 3.0.1
info:
  description: Gets the connectors vocabularies.
  title: Vocabulary Shared API
  version: "1"
tags:
- description: "The public API of the Data Plane is a data proxy enabling a data consumer\
    \ to actively querydata from the provider data source (e.g. backend Rest API,\
    \ internal database...) through its Data Planeinstance. Thus the Data Plane is\
    \ the only entry/output door for the data, which avoids the provider to exposedirectly\
    \ its data externally.The Data Plane public API being a proxy, it supports all\
    \ verbs (i.e. GET, POST, PUT, PATCH, DELETE), whichcan then conveyed until the\
    \ data source is required. This is especially useful when the actual data sourceis\
    \ a Rest API itself.In the same manner, any set of arbitrary query parameters,\
    \ path parameters and request body are supported (in the limits fixed by the HTTP\
    \ server) and can also conveyed to the actual data source."
  name: Data Plane public API
- description: 'Api targeted by the Control Plane to delegate a data transfer to the
    Data Plane after the contract has been successfully negotiated and agreed between
    the two participants. '
  name: Data Plane Signaling api API
paths:
  /connector-vocabularies/request:
    post:
      description: Obtains all vocabularies
      operationId: getVocabularies_1
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractOffer"
          description: A list of vocabularies
      tags:
      - Shared Vocabulary
  /connector-vocabularies/request-by-connector:
    post:
      description: Obtains all vocabularies from a connector
      operationId: getVocabulariesFromConnector
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectorVocabularyInput"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vocabulary"
          description: List of vocabularies of a connector
      tags:
      - Shared Vocabulary
  /federatedcatalog/request:
    post:
      description: Obtains all Catalog with dataset pagination
      operationId: getFederatedCatalog
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/JsonValue"
              properties:
                empty:
                  type: boolean
                valueType:
                  type: string
                  enum:
                  - ARRAY
                  - OBJECT
                  - STRING
                  - NUMBER
                  - "TRUE"
                  - "FALSE"
                  - "NULL"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractOffer"
          description: "A list of Catalog is returned, potentially empty"
        "500":
          description: A Query could not be completed due to an internal error
      tags:
      - Federated Catalog
  /finalize-upload:
    post:
      description: Finalizes the chunked upload and creates the S3 asset using the
        provided metadata.
      operationId: finalizeUpload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - fileName
              - json
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: Asset created successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Asset could not be created due to conflict
      tags:
      - S3Asset
  /pagination/count:
    post:
      description: CountElement the elements of an entity
      operationId: countElements
      parameters:
      - in: query
        name: type
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/JsonValue"
              properties:
                empty:
                  type: boolean
                valueType:
                  type: string
                  enum:
                  - ARRAY
                  - OBJECT
                  - STRING
                  - NUMBER
                  - "TRUE"
                  - "FALSE"
                  - "NULL"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: integer
                format: int64
          description: The total number of elements
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. entityType was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: The entity type given does not exist
      tags:
      - CountElements
  /s3assets/finalize-upload:
    post:
      description: Finalizes the chunked upload and creates the S3 asset using the
        provided metadata.
      operationId: finalizeUpload_1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - fileName
              - json
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: Asset created successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Asset could not be created due to conflict
      tags:
      - S3Asset
  /s3assets/upload-chunk:
    post:
      description: Uploads a chunk of a file to create a new S3 asset.
      operationId: uploadChunk_1
      parameters:
      - description: "Content-Disposition header, which contains the file name"
        in: header
        name: Content-Disposition
        schema:
          type: string
      - description: Index of the current chunk in the upload sequence
        in: header
        name: Chunk-Index
        schema:
          type: integer
          format: int32
      - description: Total number of chunks for this file
        in: header
        name: Total-Chunks
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - file
              - json
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: Chunk uploaded successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not upload chunk, because of conflicts"
      tags:
      - S3Asset
  /transferprocess/{processId}/complete:
    post:
      description: "Requests completion of the transfer process. Due to the asynchronous\
        \ nature of transfers, a successful response only indicates that the request\
        \ was successfully received"
      operationId: complete
      parameters:
      - in: path
        name: processId
        required: true
        schema:
          type: string
      responses:
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
      tags:
      - Transfer Process Control Api
  /transferprocess/{processId}/fail:
    post:
      description: "Requests completion of the transfer process. Due to the asynchronous\
        \ nature of transfers, a successful response only indicates that the request\
        \ was successfully received"
      operationId: fail
      parameters:
      - in: path
        name: processId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferProcessFailStateDto"
      responses:
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
      tags:
      - Transfer Process Control Api
  /upload-chunk:
    post:
      description: Uploads a chunk of a file to create a new S3 asset.
      operationId: uploadChunk
      parameters:
      - description: "Content-Disposition header, which contains the file name"
        in: header
        name: Content-Disposition
        schema:
          type: string
      - description: Index of the current chunk in the upload sequence
        in: header
        name: Chunk-Index
        schema:
          type: integer
          format: int32
      - description: Total number of chunks for this file
        in: header
        name: Total-Chunks
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - file
              - json
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: Chunk uploaded successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not upload chunk, because of conflicts"
      tags:
      - S3Asset
  /v1/dataflows:
    post:
      description: "Initiates a data transfer for the given start message. If the\
        \ data transfer is handled by the data plane, it will be performed asynchronously.\
        \ If it's a consumer-pull scenario, a data address will be returned"
      operationId: start
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataFlowStartMessage"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataFlowResponseMessage"
          description: Data transfer initiated
        "400":
          description: Failed to validate request
      tags:
      - Data Plane Signaling api API
  /v1/dataflows/check:
    get:
      description: Check if data plane is available.
      operationId: checkAvailability
      responses:
        "204":
          description: Data plane is available
      tags:
      - Data Plane Signaling api API
  /v1/dataflows/{id}/state:
    get:
      description: Get the current state of a data transfer.
      operationId: getTransferState
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataFlowState"
          description: State of the data transfer
        "404":
          description: Data transfer not found in the data plane
      tags:
      - Data Plane Signaling api API
  /v1/dataflows/{id}/suspend:
    post:
      description: Suspend a data transfer.
      operationId: suspend
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataFlowSuspendMessage"
      responses:
        "204":
          description: Data transfer suspended
        "404":
          description: Data transfer not handled by the data plane
        "409":
          description: Cannot suspend the transfer
      tags:
      - Data Plane Signaling api API
  /v1/dataflows/{id}/terminate:
    post:
      description: Terminates a data transfer.
      operationId: terminate
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataFlowTerminateMessage"
      responses:
        "204":
          description: Data transfer terminated
        "404":
          description: Data transfer not handled by the data plane
        "409":
          description: Cannot terminate the transfer
      tags:
      - Data Plane Signaling api API
  /v1/edrs/request:
    post:
      deprecated: true
      description: Request all Edr entries according to a particular query
      operationId: requestEdrEntriesV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EndpointDataReferenceEntry"
          description: The edr entries matching the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
      tags:
      - EDR Cache V1
  /v1/edrs/{transferProcessId}:
    delete:
      deprecated: true
      description: Removes an EDR entry given the transfer process ID
      operationId: removeEdrEntryV1
      parameters:
      - in: path
        name: transferProcessId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: EDR entry was deleted successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An EDR entry with the given ID does not exist
      tags:
      - EDR Cache V1
  /v1/edrs/{transferProcessId}/dataaddress:
    get:
      deprecated: true
      description: Gets the EDR data address with the given transfer process ID
      operationId: getEdrEntryDataAddressV1
      parameters:
      - in: path
        name: transferProcessId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataAddress"
          description: The data address
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An EDR data address with the given transfer process ID does
            not exist
      tags:
      - EDR Cache V1
  /v2/catalog/dataset/request:
    post:
      deprecated: true
      operationId: getDatasetV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatasetRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
          description: Gets single dataset from a connector
      tags:
      - Catalog V2
  /v2/catalog/request:
    post:
      deprecated: true
      operationId: requestCatalogV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CatalogRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Catalog"
          description: Gets contract offers (=catalog) of a single connector
      tags:
      - Catalog V2
  /v2/contractagreements/request:
    post:
      deprecated: true
      description: Gets all contract agreements according to a particular query
      operationId: queryAgreementsV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractAgreement"
          description: The contract agreements matching the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
      tags:
      - Contract Agreement V2
  /v2/contractagreements/{id}:
    get:
      deprecated: true
      description: Gets an contract agreement with the given ID
      operationId: getAgreementByIdV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractAgreement"
          description: The contract agreement
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An contract agreement with the given ID does not exist
      tags:
      - Contract Agreement V2
  /v2/contractagreements/{id}/negotiation:
    get:
      deprecated: true
      description: Gets a contract negotiation with the given contract agreement ID
      operationId: getNegotiationByAgreementIdV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractNegotiation"
          description: The contract negotiation
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An contract agreement with the given ID does not exist
      tags:
      - Contract Agreement V2
  /v2/contractdefinitions:
    post:
      deprecated: true
      description: Creates a new contract definition
      operationId: createContractDefinitionV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractDefinitionInput"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: contract definition was created successfully. Returns the Contract
            Definition Id and created timestamp
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not create contract definition, because a contract definition\
            \ with that ID already exists"
      tags:
      - Contract Definition V2
    put:
      deprecated: true
      description: Updated a contract definition with the given ID. The supplied JSON
        structure must be a valid JSON-LD object
      operationId: updateContractDefinitionV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractDefinitionInput"
      responses:
        "204":
          description: Contract definition was updated successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A contract definition with the given ID does not exist
      tags:
      - Contract Definition V2
  /v2/contractdefinitions/request:
    post:
      deprecated: true
      description: Returns all contract definitions according to a query
      operationId: queryContractDefinitionsV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractDefinitionOutput"
          description: The contract definitions matching the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request was malformed
      tags:
      - Contract Definition V2
  /v2/contractdefinitions/{id}:
    delete:
      deprecated: true
      description: "Removes a contract definition with the given ID if possible. DANGER\
        \ ZONE: Note that deleting contract definitions can have unexpected results,\
        \ especially for contract offers that have been sent out or ongoing or contract\
        \ negotiations."
      operationId: deleteContractDefinitionV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Contract definition was deleted successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A contract definition with the given ID does not exist
      tags:
      - Contract Definition V2
    get:
      deprecated: true
      description: Gets an contract definition with the given ID
      operationId: getContractDefinitionV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractDefinitionOutput"
          description: The contract definition
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An contract agreement with the given ID does not exist
      tags:
      - Contract Definition V2
  /v2/contractnegotiations:
    post:
      deprecated: true
      description: "Initiates a contract negotiation for a given offer and with the\
        \ given counter part. Please note that successfully invoking this endpoint\
        \ only means that the negotiation was initiated. Clients must poll the /{id}/state\
        \ endpoint to track the state"
      operationId: initiateContractNegotiationV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: The negotiation was successfully initiated. Returns the contract
            negotiation ID and created timestamp
          links:
            poll-state:
              operationId: getNegotiationStateV2
              parameters:
                id: $response.body#/id
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
      tags:
      - Contract Negotiation V2
  /v2/contractnegotiations/request:
    post:
      deprecated: true
      description: Returns all contract negotiations according to a query
      operationId: queryNegotiationsV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractNegotiation"
          description: The contract negotiations that match the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request was malformed
      tags:
      - Contract Negotiation V2
  /v2/contractnegotiations/{id}:
    get:
      deprecated: true
      description: Gets a contract negotiation with the given ID
      operationId: getNegotiationV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractNegotiation"
          description: The contract negotiation
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An contract negotiation with the given ID does not exist
      tags:
      - Contract Negotiation V2
  /v2/contractnegotiations/{id}/agreement:
    get:
      deprecated: true
      description: Gets a contract agreement for a contract negotiation with the given
        ID
      operationId: getAgreementForNegotiationV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractAgreement"
          description: "The contract agreement that is attached to the negotiation,\
            \ or null"
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An contract negotiation with the given ID does not exist
      tags:
      - Contract Negotiation V2
  /v2/contractnegotiations/{id}/state:
    get:
      deprecated: true
      description: Gets the state of a contract negotiation with the given ID
      operationId: getNegotiationStateV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NegotiationState"
          description: The contract negotiation's state
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An contract negotiation with the given ID does not exist
      tags:
      - Contract Negotiation V2
  /v2/contractnegotiations/{id}/terminate:
    post:
      deprecated: true
      description: Terminates the contract negotiation.
      operationId: terminateNegotiationV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TerminateNegotiationSchema"
      responses:
        "200":
          description: ContractNegotiation is terminating
          links:
            poll-state:
              operationId: getNegotiationStateV2
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request was malformed
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A contract negotiation with the given ID does not exist
      tags:
      - Contract Negotiation V2
  /v2/dataplanes:
    get:
      deprecated: true
      description: Returns a list of all currently registered data plane instances
      operationId: getAllDataPlaneInstancesV2
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DataPlaneInstanceSchema"
          description: A (potentially empty) list of currently registered data plane
            instances
      tags:
      - Dataplane Selector V2
    post:
      deprecated: true
      description: "Adds one dataplane instance to the internal database of the selector.\
        \ DEPRECATED: dataplanes should register themselves through control-api"
      operationId: addDataPlaneInstanceV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataPlaneInstanceSchema"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: Entry was added successfully to the database
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
      tags:
      - Dataplane Selector V2
  /v2/dataplanes/select:
    post:
      deprecated: true
      description: Finds the best fitting data plane instance for a particular query
      operationId: selectDataPlaneInstanceV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectionRequestSchema"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataPlaneInstanceSchema"
          description: The DataPlane instance that fits best for the given selection
            request
        "204":
          description: No suitable DataPlane instance was found
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
      tags:
      - Dataplane Selector V2
  /v2/policydefinitions:
    post:
      deprecated: true
      description: Creates a new policy definition
      operationId: createPolicyDefinitionV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyDefinitionInput"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: policy definition was created successfully. Returns the Policy
            Definition Id and created timestamp
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not create policy definition, because a contract definition\
            \ with that ID already exists"
      tags:
      - Policy Definition V2
  /v2/policydefinitions/request:
    post:
      deprecated: true
      description: Returns all policy definitions according to a query
      operationId: queryPolicyDefinitionsV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PolicyDefinitionOutput"
          description: The policy definitions matching the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request was malformed
      tags:
      - Policy Definition V2
  /v2/policydefinitions/{id}:
    delete:
      deprecated: true
      description: "Removes a policy definition with the given ID if possible. Deleting\
        \ a policy definition is only possible if that policy definition is not yet\
        \ referenced by a contract definition, in which case an error is returned.\
        \ DANGER ZONE: Note that deleting policy definitions can have unexpected results,\
        \ do this at your own risk!"
      operationId: deletePolicyDefinitionV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Policy definition was deleted successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An policy definition with the given ID does not exist
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "The policy definition cannot be deleted, because it is referenced\
            \ by a contract definition"
      tags:
      - Policy Definition V2
    get:
      deprecated: true
      description: Gets a policy definition with the given ID
      operationId: getPolicyDefinitionV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyDefinitionOutput"
          description: The  policy definition
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An  policy definition with the given ID does not exist
      tags:
      - Policy Definition V2
    put:
      deprecated: true
      description: "Updates an existing Policy, If the Policy is not found, an error\
        \ is reported"
      operationId: updatePolicyDefinitionV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyDefinitionInput"
      responses:
        "204":
          description: policy definition was updated successfully.
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
          description: "policy definition could not be updated, because it does not\
            \ exists"
      tags:
      - Policy Definition V2
  /v2/transferprocesses:
    post:
      deprecated: true
      description: "Initiates a data transfer with the given parameters. Due to the\
        \ asynchronous nature of transfers, a successful response only indicates that\
        \ the request was successfully received. This may take a long time, so clients\
        \ must poll the /{id}/state endpoint to track the state."
      operationId: initiateTransferProcessV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: The transfer was successfully initiated. Returns the transfer
            process ID and created timestamp
          links:
            poll-state:
              operationId: getTransferProcessStateV2
              parameters:
                id: $response.body#/id
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
      tags:
      - Transfer Process V2
  /v2/transferprocesses/request:
    post:
      deprecated: true
      description: Returns all transfer process according to a query
      operationId: queryTransferProcessesV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransferProcess"
          description: The transfer processes matching the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request was malformed
      tags:
      - Transfer Process V2
  /v2/transferprocesses/{id}:
    get:
      deprecated: true
      description: Gets an transfer process with the given ID
      operationId: getTransferProcessV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferProcess"
          description: The transfer process
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A transfer process with the given ID does not exist
      tags:
      - Transfer Process V2
  /v2/transferprocesses/{id}/deprovision:
    post:
      deprecated: true
      description: "Requests the deprovisioning of resources associated with a transfer\
        \ process. Due to the asynchronous nature of transfers, a successful response\
        \ only indicates that the request was successfully received. This may take\
        \ a long time, so clients must poll the /{id}/state endpoint to track the\
        \ state."
      operationId: deprovisionTransferProcessV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Request to deprovision the transfer process was successfully
            received
          links:
            poll-state:
              operationId: deprovisionTransferProcessV2
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A transfer process with the given ID does not exist
      tags:
      - Transfer Process V2
  /v2/transferprocesses/{id}/resume:
    post:
      deprecated: true
      description: "Requests the resumption of a suspended transfer process. Due to\
        \ the asynchronous nature of transfers, a successful response only indicates\
        \ that the request was successfully received. This may take a long time, so\
        \ clients must poll the /{id}/state endpoint to track the state."
      operationId: resumeTransferProcessV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Request to resume the transfer process was successfully received
          links:
            poll-state:
              operationId: resumeTransferProcessV2
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A transfer process with the given ID does not exist
      tags:
      - Transfer Process V2
  /v2/transferprocesses/{id}/state:
    get:
      deprecated: true
      description: Gets the state of a transfer process with the given ID
      operationId: getTransferProcessStateV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferState"
          description: The  transfer process's state
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An  transfer process with the given ID does not exist
      tags:
      - Transfer Process V2
  /v2/transferprocesses/{id}/suspend:
    post:
      deprecated: true
      description: "Requests the suspension of a transfer process. Due to the asynchronous\
        \ nature of transfers, a successful response only indicates that the request\
        \ was successfully received. This may take a long time, so clients must poll\
        \ the /{id}/state endpoint to track the state."
      operationId: suspendTransferProcessV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SuspendTransfer"
      responses:
        "204":
          description: Request to suspend the transfer process was successfully received
          links:
            poll-state:
              operationId: suspendTransferProcessV2
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A transfer process with the given ID does not exist
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not suspend the transfer process, because it is already\
            \ completed or terminated."
      tags:
      - Transfer Process V2
  /v2/transferprocesses/{id}/terminate:
    post:
      deprecated: true
      description: "Requests the termination of a transfer process. Due to the asynchronous\
        \ nature of transfers, a successful response only indicates that the request\
        \ was successfully received. This may take a long time, so clients must poll\
        \ the /{id}/state endpoint to track the state."
      operationId: terminateTransferProcessV2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TerminateTransfer"
      responses:
        "204":
          description: Request to terminate the transfer process was successfully
            received
          links:
            poll-state:
              operationId: terminateTransferProcessV2
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A transfer process with the given ID does not exist
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not terminate transfer process, because it is already\
            \ completed or terminated."
      tags:
      - Transfer Process V2
  /v3.1alpha/catalog/dataset/request:
    post:
      operationId: getDatasetV31alpha
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatasetRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
          description: Gets single dataset from a connector
      tags:
      - Catalog V3
  /v3.1alpha/catalog/request:
    post:
      operationId: requestCatalogV31alpha
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CatalogRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Catalog"
          description: Gets contract offers (=catalog) of a single connector
      tags:
      - Catalog V3
  /v3.1alpha/policydefinitions:
    post:
      description: Creates a new policy definition
      operationId: createPolicyDefinitionV3_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyDefinitionInput"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: policy definition was created successfully. Returns the Policy
            Definition Id and created timestamp
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not create policy definition, because a contract definition\
            \ with that ID already exists"
      tags:
      - Policy Definition v3.1-alpha
  /v3.1alpha/policydefinitions/request:
    post:
      description: Returns all policy definitions according to a query
      operationId: queryPolicyDefinitionsV3_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PolicyDefinitionOutput"
          description: The policy definitions matching the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request was malformed
      tags:
      - Policy Definition v3.1-alpha
  /v3.1alpha/policydefinitions/{id}:
    delete:
      description: "Removes a policy definition with the given ID if possible. Deleting\
        \ a policy definition is only possible if that policy definition is not yet\
        \ referenced by a contract definition, in which case an error is returned.\
        \ DANGER ZONE: Note that deleting policy definitions can have unexpected results,\
        \ do this at your own risk!"
      operationId: deletePolicyDefinitionV3_1
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Policy definition was deleted successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An policy definition with the given ID does not exist
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "The policy definition cannot be deleted, because it is referenced\
            \ by a contract definition"
      tags:
      - Policy Definition v3.1-alpha
    get:
      description: Gets a policy definition with the given ID
      operationId: getPolicyDefinitionV3_1
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyDefinitionOutput"
          description: The  policy definition
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An  policy definition with the given ID does not exist
      tags:
      - Policy Definition v3.1-alpha
    put:
      description: "Updates an existing Policy, If the Policy is not found, an error\
        \ is reported"
      operationId: updatePolicyDefinitionV3_1
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyDefinitionInput"
      responses:
        "204":
          description: policy definition was updated successfully.
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
          description: "policy definition could not be updated, because it does not\
            \ exists"
      tags:
      - Policy Definition v3.1-alpha
  /v3.1alpha/policydefinitions/{id}/evaluationplan:
    post:
      description: "Creates an execution plane for an existing Policy, If the Policy\
        \ is not found, an error is reported"
      operationId: createExecutionPlaneV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyEvaluationPlanRequestSchema"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyEvaluationPlanSchema"
          description: Returns the evaluation plan
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
          description: "An evaluation plan could not be created, because the policy\
            \ definition does not exists"
      tags:
      - Policy Definition v3.1-alpha
  /v3.1alpha/policydefinitions/{id}/validate:
    post:
      description: "Validates an existing Policy, If the Policy is not found, an error\
        \ is reported"
      operationId: validatePolicyDefinitionV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyValidationResultSchema"
          description: Returns the validation result
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
          description: "policy definition could not be validated, because it does\
            \ not exists"
      tags:
      - Policy Definition v3.1-alpha
  /v3/assets:
    post:
      description: Creates a new asset together with a data address
      operationId: createAssetV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetInput"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: Asset was created successfully. Returns the asset Id and created
            timestamp
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not create asset, because an asset with that ID already\
            \ exists"
      tags:
      - Asset V3
    put:
      description: "Updates an asset with the given ID if it exists. If the asset\
        \ is not found, no further action is taken. DANGER ZONE: Note that updating\
        \ assets can have unexpected results, especially for contract offers that\
        \ have been sent out or are ongoing in contract negotiations."
      operationId: updateAssetV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetInput"
      responses:
        "204":
          description: Asset was updated successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          description: "Asset could not be updated, because it does not exist."
      tags:
      - Asset V3
  /v3/assets/request:
    post:
      description: Request all assets according to a particular query
      operationId: requestAssetsV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssetOutput"
          description: The assets matching the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
      tags:
      - Asset V3
  /v3/assets/{id}:
    delete:
      description: "Removes an asset with the given ID if possible. Deleting an asset\
        \ is only possible if that asset is not yet referenced by a contract agreement,\
        \ in which case an error is returned. DANGER ZONE: Note that deleting assets\
        \ can have unexpected results, especially for contract offers that have been\
        \ sent out or ongoing or contract negotiations."
      operationId: removeAssetV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Asset was deleted successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An asset with the given ID does not exist
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "The asset cannot be deleted, because it is referenced by a\
            \ contract agreement"
      tags:
      - Asset V3
    get:
      description: Gets an asset with the given ID
      operationId: getAssetV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetOutput"
          description: The asset
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An asset with the given ID does not exist
      tags:
      - Asset V3
  /v3/catalog/dataset/request:
    post:
      operationId: getDatasetV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatasetRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
          description: Gets single dataset from a connector
      tags:
      - Catalog V3
  /v3/catalog/request:
    post:
      operationId: requestCatalogV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CatalogRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Catalog"
          description: Gets contract offers (=catalog) of a single connector
      tags:
      - Catalog V3
  /v3/complexpolicydefinitions:
    post:
      description: Creates a new policy definition
      operationId: createPolicyDefinitionV3_2
      requestBody:
        content:
          application/json: {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: policy definition was created successfully. Returns the Policy
            Definition Id and created timestamp
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not create policy definition, because a contract definition\
            \ with that ID already exists"
      tags:
      - Complex Policy Definition
  /v3/complexpolicydefinitions/request:
    post:
      description: Creates a new policy definition
      operationId: getPolicyDefinitions
      requestBody:
        content:
          application/json: {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: Returns the Policy Definitions
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
      tags:
      - Complex Policy Definition
  /v3/contractagreements/request:
    post:
      description: Gets all contract agreements according to a particular query
      operationId: queryAgreementsV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractAgreement"
          description: The contract agreements matching the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
      tags:
      - Contract Agreement V3
  /v3/contractagreements/{id}:
    get:
      description: Gets an contract agreement with the given ID
      operationId: getAgreementByIdV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractAgreement"
          description: The contract agreement
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An contract agreement with the given ID does not exist
      tags:
      - Contract Agreement V3
  /v3/contractagreements/{id}/negotiation:
    get:
      description: Gets a contract negotiation with the given contract agreement ID
      operationId: getNegotiationByAgreementIdV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractNegotiation"
          description: The contract negotiation
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An contract agreement with the given ID does not exist
      tags:
      - Contract Agreement V3
  /v3/contractdefinitions:
    post:
      description: Creates a new contract definition
      operationId: createContractDefinitionV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractDefinitionInput"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: contract definition was created successfully. Returns the Contract
            Definition Id and created timestamp
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not create contract definition, because a contract definition\
            \ with that ID already exists"
      tags:
      - Contract Definition V3
    put:
      description: Updated a contract definition with the given ID. The supplied JSON
        structure must be a valid JSON-LD object
      operationId: updateContractDefinitionV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractDefinitionInput"
      responses:
        "204":
          description: Contract definition was updated successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A contract definition with the given ID does not exist
      tags:
      - Contract Definition V3
  /v3/contractdefinitions/request:
    post:
      description: Returns all contract definitions according to a query
      operationId: queryContractDefinitionsV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractDefinitionOutput"
          description: The contract definitions matching the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request was malformed
      tags:
      - Contract Definition V3
  /v3/contractdefinitions/{id}:
    delete:
      description: "Removes a contract definition with the given ID if possible. DANGER\
        \ ZONE: Note that deleting contract definitions can have unexpected results,\
        \ especially for contract offers that have been sent out or ongoing or contract\
        \ negotiations."
      operationId: deleteContractDefinitionV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Contract definition was deleted successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A contract definition with the given ID does not exist
      tags:
      - Contract Definition V3
    get:
      description: Gets an contract definition with the given ID
      operationId: getContractDefinitionV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractDefinitionOutput"
          description: The contract definition
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An contract agreement with the given ID does not exist
      tags:
      - Contract Definition V3
  /v3/contractnegotiations:
    post:
      description: "Initiates a contract negotiation for a given offer and with the\
        \ given counter part. Please note that successfully invoking this endpoint\
        \ only means that the negotiation was initiated. Clients must poll the /{id}/state\
        \ endpoint to track the state"
      operationId: initiateContractNegotiationV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: The negotiation was successfully initiated. Returns the contract
            negotiation ID and created timestamp
          links:
            poll-state:
              operationId: getNegotiationStateV3
              parameters:
                id: $response.body#/id
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
      tags:
      - Contract Negotiation V3
  /v3/contractnegotiations/request:
    post:
      description: Returns all contract negotiations according to a query
      operationId: queryNegotiationsV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractNegotiation"
          description: The contract negotiations that match the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request was malformed
      tags:
      - Contract Negotiation V3
  /v3/contractnegotiations/{id}:
    get:
      description: Gets a contract negotiation with the given ID
      operationId: getNegotiationV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractNegotiation"
          description: The contract negotiation
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An contract negotiation with the given ID does not exist
      tags:
      - Contract Negotiation V3
  /v3/contractnegotiations/{id}/agreement:
    get:
      description: Gets a contract agreement for a contract negotiation with the given
        ID
      operationId: getAgreementForNegotiationV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractAgreement"
          description: "The contract agreement that is attached to the negotiation,\
            \ or null"
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An contract negotiation with the given ID does not exist
      tags:
      - Contract Negotiation V3
  /v3/contractnegotiations/{id}/state:
    get:
      description: Gets the state of a contract negotiation with the given ID
      operationId: getNegotiationStateV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NegotiationState"
          description: The contract negotiation's state
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An contract negotiation with the given ID does not exist
      tags:
      - Contract Negotiation V3
  /v3/contractnegotiations/{id}/terminate:
    post:
      description: Terminates the contract negotiation.
      operationId: terminateNegotiationV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TerminateNegotiationSchema"
      responses:
        "200":
          description: ContractNegotiation is terminating
          links:
            poll-state:
              operationId: getNegotiationStateV3
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request was malformed
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A contract negotiation with the given ID does not exist
      tags:
      - Contract Negotiation V3
  /v3/dataplanes:
    get:
      description: Returns a list of all currently registered data plane instances
      operationId: getAllDataPlaneInstancesV3
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DataPlaneInstanceSchema"
          description: A (potentially empty) list of currently registered data plane
            instances
      tags:
      - Dataplane Selector V3
  /v3/edrs/request:
    post:
      description: Request all Edr entries according to a particular query
      operationId: requestEdrEntriesV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EndpointDataReferenceEntry"
          description: The edr entries matching the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
      tags:
      - EDR Cache V3
  /v3/edrs/{transferProcessId}:
    delete:
      description: Removes an EDR entry given the transfer process ID
      operationId: removeEdrEntryV3
      parameters:
      - in: path
        name: transferProcessId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: EDR entry was deleted successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An EDR entry with the given ID does not exist
      tags:
      - EDR Cache V3
  /v3/edrs/{transferProcessId}/dataaddress:
    get:
      description: Gets the EDR data address with the given transfer process ID
      operationId: getEdrEntryDataAddressV3
      parameters:
      - in: path
        name: transferProcessId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataAddress"
          description: The data address
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An EDR data address with the given transfer process ID does
            not exist
      tags:
      - EDR Cache V3
  /v3/inesdatatransferprocesses:
    post:
      description: "Initiates a data transfer with the given parameters. Due to the\
        \ asynchronous nature of transfers, a successful response only indicates that\
        \ the request was successfully received. This may take a long time, so clients\
        \ must poll the /{id}/state endpoint to track the state."
      operationId: initiateTransferProcess
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: The transfer was successfully initiated. Returns the transfer
            process ID and created timestamp
          links:
            poll-state:
              operationId: getTransferProcessStateV3
              parameters:
                id: $response.body#/id
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
      tags:
      - Transfer Process V3
  /v3/policydefinitions:
    post:
      description: Creates a new policy definition
      operationId: createPolicyDefinitionV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyDefinitionInput"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: policy definition was created successfully. Returns the Policy
            Definition Id and created timestamp
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not create policy definition, because a contract definition\
            \ with that ID already exists"
      tags:
      - Policy Definition V3
  /v3/policydefinitions/request:
    post:
      description: Returns all policy definitions according to a query
      operationId: queryPolicyDefinitionsV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PolicyDefinitionOutput"
          description: The policy definitions matching the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request was malformed
      tags:
      - Policy Definition V3
  /v3/policydefinitions/{id}:
    delete:
      description: "Removes a policy definition with the given ID if possible. Deleting\
        \ a policy definition is only possible if that policy definition is not yet\
        \ referenced by a contract definition, in which case an error is returned.\
        \ DANGER ZONE: Note that deleting policy definitions can have unexpected results,\
        \ do this at your own risk!"
      operationId: deletePolicyDefinitionV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Policy definition was deleted successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An policy definition with the given ID does not exist
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "The policy definition cannot be deleted, because it is referenced\
            \ by a contract definition"
      tags:
      - Policy Definition V3
    get:
      description: Gets a policy definition with the given ID
      operationId: getPolicyDefinitionV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyDefinitionOutput"
          description: The  policy definition
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An  policy definition with the given ID does not exist
      tags:
      - Policy Definition V3
    put:
      description: "Updates an existing Policy, If the Policy is not found, an error\
        \ is reported"
      operationId: updatePolicyDefinitionV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyDefinitionInput"
      responses:
        "204":
          description: policy definition was updated successfully.
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
          description: "policy definition could not be updated, because it does not\
            \ exists"
      tags:
      - Policy Definition V3
  /v3/transferprocesses:
    post:
      description: "Initiates a data transfer with the given parameters. Due to the\
        \ asynchronous nature of transfers, a successful response only indicates that\
        \ the request was successfully received. This may take a long time, so clients\
        \ must poll the /{id}/state endpoint to track the state."
      operationId: initiateTransferProcessV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: The transfer was successfully initiated. Returns the transfer
            process ID and created timestamp
          links:
            poll-state:
              operationId: getTransferProcessStateV3
              parameters:
                id: $response.body#/id
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
      tags:
      - Transfer Process V3
  /v3/transferprocesses/request:
    post:
      description: Returns all transfer process according to a query
      operationId: queryTransferProcessesV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransferProcess"
          description: The transfer processes matching the query
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request was malformed
      tags:
      - Transfer Process V3
  /v3/transferprocesses/{id}:
    get:
      description: Gets an transfer process with the given ID
      operationId: getTransferProcessV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferProcess"
          description: The transfer process
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A transfer process with the given ID does not exist
      tags:
      - Transfer Process V3
  /v3/transferprocesses/{id}/deprovision:
    post:
      description: "Requests the deprovisioning of resources associated with a transfer\
        \ process. Due to the asynchronous nature of transfers, a successful response\
        \ only indicates that the request was successfully received. This may take\
        \ a long time, so clients must poll the /{id}/state endpoint to track the\
        \ state."
      operationId: deprovisionTransferProcessV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Request to deprovision the transfer process was successfully
            received
          links:
            poll-state:
              operationId: deprovisionTransferProcessV3
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A transfer process with the given ID does not exist
      tags:
      - Transfer Process V3
  /v3/transferprocesses/{id}/resume:
    post:
      description: "Requests the resumption of a suspended transfer process. Due to\
        \ the asynchronous nature of transfers, a successful response only indicates\
        \ that the request was successfully received. This may take a long time, so\
        \ clients must poll the /{id}/state endpoint to track the state."
      operationId: resumeTransferProcessV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Request to resume the transfer process was successfully received
          links:
            poll-state:
              operationId: resumeTransferProcessV3
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A transfer process with the given ID does not exist
      tags:
      - Transfer Process V3
  /v3/transferprocesses/{id}/state:
    get:
      description: Gets the state of a transfer process with the given ID
      operationId: getTransferProcessStateV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferState"
          description: The  transfer process's state
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: An  transfer process with the given ID does not exist
      tags:
      - Transfer Process V3
  /v3/transferprocesses/{id}/suspend:
    post:
      description: "Requests the suspension of a transfer process. Due to the asynchronous\
        \ nature of transfers, a successful response only indicates that the request\
        \ was successfully received. This may take a long time, so clients must poll\
        \ the /{id}/state endpoint to track the state."
      operationId: suspendTransferProcessV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SuspendTransfer"
      responses:
        "204":
          description: Request to suspend the transfer process was successfully received
          links:
            poll-state:
              operationId: suspendTransferProcessV3
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A transfer process with the given ID does not exist
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not suspend the transfer process, because it is already\
            \ completed or terminated."
      tags:
      - Transfer Process V3
  /v3/transferprocesses/{id}/terminate:
    post:
      description: "Requests the termination of a transfer process. Due to the asynchronous\
        \ nature of transfers, a successful response only indicates that the request\
        \ was successfully received. This may take a long time, so clients must poll\
        \ the /{id}/state endpoint to track the state."
      operationId: terminateTransferProcessV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TerminateTransfer"
      responses:
        "204":
          description: Request to terminate the transfer process was successfully
            received
          links:
            poll-state:
              operationId: terminateTransferProcessV3
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A transfer process with the given ID does not exist
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not terminate transfer process, because it is already\
            \ completed or terminated."
      tags:
      - Transfer Process V3
  /vocabularies:
    post:
      description: Creates a new vocabulary
      operationId: createVocabulary
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VocabularyOutput"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: Vocabulary was created successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Could not create vocabulary, because a vocabulary with that\
            \ ID already exists"
      tags:
      - Vocabulary
    put:
      description: "Updates a vocabulary with the given ID if it exists. If the vocabulary\
        \ is not found, no further action is taken."
      operationId: updateVocabulary
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VocabularyOutput"
      responses:
        "204":
          description: Vocabulary was updated successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          description: "Vocabulary could not be updated, because it does not exist."
      tags:
      - Vocabulary
  /vocabularies/request:
    post:
      description: Obtains all vocabularies
      operationId: getVocabularies
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractOffer"
          description: A list of vocabularies
      tags:
      - Vocabulary
  /vocabularies/{id}:
    delete:
      description: Removes a vocabulary with the given ID if possible
      operationId: removeVocabulary
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Vocabulary was deleted successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Vocabulary could not be removed, because it does not exist."
      tags:
      - Vocabulary
    get:
      description: Gets a vocabulary with the given ID
      operationId: getVocabulary
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VocabularyOutput"
          description: The vocabulary
        "400":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
          description: A vocabulary with the given ID does not exist
      tags:
      - Vocabulary
  /{any}:
    delete:
      description: Send `DELETE` data query to the Data Plane.
      operationId: delete
      responses:
        "400":
          description: Missing access token
        "403":
          description: Access token is expired or invalid
        "500":
          description: Failed to transfer data
      tags:
      - Data Plane public API
    get:
      description: Send `GET` data query to the Data Plane.
      operationId: get
      responses:
        "400":
          description: Missing access token
        "403":
          description: Access token is expired or invalid
        "500":
          description: Failed to transfer data
      tags:
      - Data Plane public API
    head:
      description: Send `HEAD` data query to the Data Plane.
      operationId: head
      responses:
        "400":
          description: Missing access token
        "403":
          description: Access token is expired or invalid
        "500":
          description: Failed to transfer data
      tags:
      - Data Plane public API
    patch:
      description: Send `PATCH` data query to the Data Plane.
      operationId: patch
      responses:
        "400":
          description: Missing access token
        "403":
          description: Access token is expired or invalid
        "500":
          description: Failed to transfer data
      tags:
      - Data Plane public API
    post:
      description: Send `POST` data query to the Data Plane.
      operationId: post
      responses:
        "400":
          description: Missing access token
        "403":
          description: Access token is expired or invalid
        "500":
          description: Failed to transfer data
      tags:
      - Data Plane public API
    put:
      description: Send `PUT` data query to the Data Plane.
      operationId: put
      responses:
        "400":
          description: Missing access token
        "403":
          description: Access token is expired or invalid
        "500":
          description: Failed to transfer data
      tags:
      - Data Plane public API
components:
  schemas:
    Action:
      type: object
      properties:
        constraint:
          $ref: "#/components/schemas/Constraint"
        includedIn:
          type: string
        type:
          type: string
    ApiErrorDetail:
      type: object
      example:
        message: error message
        type: ErrorType
        path: object.error.path
        invalidValue: this value is not valid
      properties:
        invalidValue:
          type: string
        message:
          type: string
        path:
          type: string
        type:
          type: string
    AssetInput:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': asset-id
        properties:
          key: value
        privateProperties:
          privateKey: privateValue
        dataAddress:
          type: HttpData
          baseUrl: https://jsonplaceholder.typicode.com/todos
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/Asset
        dataAddress:
          $ref: "#/components/schemas/DataAddress"
        privateProperties:
          $ref: "#/components/schemas/Properties"
        properties:
          $ref: "#/components/schemas/Properties"
      required:
      - '@context'
      - dataAddress
      - properties
    AssetOutput:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': asset-id
        properties:
          key: value
        privateProperties:
          privateKey: privateValue
        dataAddress:
          type: HttpData
          baseUrl: https://jsonplaceholder.typicode.com/todos
        createdAt: 1688465655
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/Asset
        createdAt:
          type: integer
          format: int64
        dataAddress:
          $ref: "#/components/schemas/DataAddress"
        privateProperties:
          $ref: "#/components/schemas/Properties"
        properties:
          $ref: "#/components/schemas/Properties"
    CallbackAddress:
      type: object
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/CallbackAddress
        authCodeId:
          type: string
        authKey:
          type: string
        events:
          type: array
          items:
            type: string
          uniqueItems: true
        transactional:
          type: boolean
        uri:
          type: string
    Catalog:
      type: object
      description: DCAT catalog
      example:
        '@id': 7df65569-8c59-4013-b1c0-fa14f6641bf2
        '@type': dcat:Catalog
        dcat:dataset:
          '@id': bcca61be-e82e-4da6-bfec-9716a56cef35
          '@type': dcat:Dataset
          odrl:hasPolicy:
            '@id': OGU0ZTMzMGMtODQ2ZS00ZWMxLThmOGQtNWQxNWM0NmI2NmY4:YmNjYTYxYmUtZTgyZS00ZGE2LWJmZWMtOTcxNmE1NmNlZjM1:NDY2ZTZhMmEtNjQ1Yy00ZGQ0LWFlZDktMjdjNGJkZTU4MDNj
            '@type': odrl:Set
            odrl:permission:
              odrl:target: bcca61be-e82e-4da6-bfec-9716a56cef35
              odrl:action:
                odrl:type: http://www.w3.org/ns/odrl/2/use
              odrl:constraint:
                odrl:and:
                - odrl:leftOperand: https://w3id.org/edc/v0.0.1/ns/inForceDate
                  odrl:operator:
                    '@id': odrl:gteq
                  odrl:rightOperand: 2023-07-07T07:19:58.585601395Z
                - odrl:leftOperand: https://w3id.org/edc/v0.0.1/ns/inForceDate
                  odrl:operator:
                    '@id': odrl:lteq
                  odrl:rightOperand: 2023-07-12T07:19:58.585601395Z
            odrl:prohibition: []
            odrl:obligation: []
          dcat:distribution:
          - '@type': dcat:Distribution
            dct:format:
              '@id': HttpData
            dcat:accessService: 5e839777-d93e-4785-8972-1005f51cf367
          description: description
          id: bcca61be-e82e-4da6-bfec-9716a56cef35
        dcat:service:
          '@id': 5e839777-d93e-4785-8972-1005f51cf367
          '@type': dcat:DataService
          dct:terms: connector
          dct:endpointUrl: http://localhost:16806/protocol
        dspace:participantId: urn:connector:provider
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
          dct: http://purl.org/dc/terms/
          edc: https://w3id.org/edc/v0.0.1/ns/
          dcat: http://www.w3.org/ns/dcat#
          odrl: http://www.w3.org/ns/odrl/2/
          dspace: https://w3id.org/dspace/v0.8/
    CatalogRequest:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': CatalogRequest
        counterPartyAddress: http://provider-address
        counterPartyId: providerId
        protocol: dataspace-protocol-http
        additionalScopes:
        - org.eclipse.edc.vc.type:SomeCredential:read
        - org.eclipse.edc.vc.type:AnotherCredential:write
        querySpec:
          offset: 0
          limit: 50
          sortOrder: DESC
          sortField: fieldName
          filterExpression: []
      properties:
        '@context':
          type: object
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/CatalogRequest
        additionalScopes:
          type: array
          items:
            type: string
        counterPartyAddress:
          type: string
        counterPartyId:
          type: string
        protocol:
          type: string
        querySpec:
          $ref: "#/components/schemas/QuerySpec"
      required:
      - '@context'
      - counterPartyAddress
      - protocol
    ConnectorVocabularyInput:
      type: object
      example:
        connectorId: connector-c1
      properties:
        connectorId:
          type: string
    Constraint:
      type: object
      discriminator:
        propertyName: edctype
      properties:
        edctype:
          type: string
      required:
      - edctype
    ContractAgreement:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/ContractAgreement
        '@id': negotiation-id
        providerId: provider-id
        consumerId: consumer-id
        assetId: asset-id
        contractSigningDate: 1688465655
        policy:
          '@context': http://www.w3.org/ns/odrl.jsonld
          '@type': Set
          '@id': offer-id
          permission:
          - target: asset-id
            action: display
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/ContractAgreement
        assetId:
          type: string
        consumerId:
          type: string
        contractSigningDate:
          type: integer
          format: int64
        policy:
          $ref: "#/components/schemas/Policy"
        providerId:
          type: string
    ContractDefinitionInput:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': definition-id
        accessPolicyId: asset-policy-id
        contractPolicyId: contract-policy-id
        assetsSelector: []
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/ContractDefinition
        accessPolicyId:
          type: string
        assetsSelector:
          type: array
          items:
            $ref: "#/components/schemas/Criterion"
        contractPolicyId:
          type: string
      required:
      - '@context'
      - accessPolicyId
      - assetsSelector
      - contractPolicyId
    ContractDefinitionOutput:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': definition-id
        accessPolicyId: asset-policy-id
        contractPolicyId: contract-policy-id
        assetsSelector: []
        createdAt: 1688465655
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/ContractDefinition
        accessPolicyId:
          type: string
        assetsSelector:
          type: array
          items:
            $ref: "#/components/schemas/Criterion"
        contractPolicyId:
          type: string
        createdAt:
          type: integer
          format: int64
    ContractNegotiation:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/ContractNegotiation
        '@id': negotiation-id
        type: PROVIDER
        protocol: dataspace-protocol-http
        counterPartyId: counter-party-id
        counterPartyAddress: http://counter/party/address
        state: VERIFIED
        contractAgreementId: contract:agreement:id
        errorDetail: eventual-error-detail
        createdAt: 1688465655
        callbackAddresses:
        - transactional: false
          uri: http://callback/url
          events:
          - contract.negotiation
          - transfer.process
          authKey: auth-key
          authCodeId: auth-code-id
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/ContractNegotiation
        callbackAddresses:
          type: array
          items:
            $ref: "#/components/schemas/CallbackAddress"
        contractAgreementId:
          type: string
        counterPartyAddress:
          type: string
        counterPartyId:
          type: string
        errorDetail:
          type: string
        protocol:
          type: string
        state:
          type: string
        type:
          type: string
          enum:
          - CONSUMER
          - PROVIDER
    ContractOffer:
      type: object
      properties:
        assetId:
          type: string
        id:
          type: string
        policy:
          $ref: "#/components/schemas/Policy"
    ContractRequest:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/ContractRequest
        counterPartyAddress: http://provider-address
        protocol: dataspace-protocol-http
        policy:
          '@context': http://www.w3.org/ns/odrl.jsonld
          '@type': odrl:Offer
          '@id': offer-id
          assigner: providerId
          permission: []
          prohibition: []
          obligation: []
          target: assetId
        callbackAddresses:
        - transactional: false
          uri: http://callback/url
          events:
          - contract.negotiation
          - transfer.process
          authKey: auth-key
          authCodeId: auth-code-id
      properties:
        '@context':
          type: object
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/ContractRequest
        callbackAddresses:
          type: array
          items:
            $ref: "#/components/schemas/CallbackAddress"
        counterPartyAddress:
          type: string
        policy:
          $ref: "#/components/schemas/Offer"
        protocol:
          type: string
      required:
      - '@context'
      - counterPartyAddress
      - policy
      - protocol
    Criterion:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': Criterion
        operandLeft: fieldName
        operator: =
        operandRight: some value
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/Criterion
        operandLeft:
          type: object
        operandRight:
          type: object
        operator:
          type: string
      required:
      - operandLeft
      - operandRight
      - operator
    DataAddress:
      type: object
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/DataAddress
        type:
          type: string
    DataFlowResponseMessage:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': DataFlowResponseMessage
        dataAddress:
          type: HttpData
          baseUrl: https://jsonplaceholder.typicode.com/todos
      properties:
        '@context':
          type: object
        '@type':
          type: string
          example: DataFlowResponseMessage
        dataAddress:
          $ref: "#/components/schemas/DataAddress"
    DataFlowStartMessage:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': transfer-id
        '@type': DataFlowStartMessage
        processId: process-id
        datasetId: dataset-id
        participantId: participant-id
        agreementId: agreement-id
        transferType: HttpData-PUSH
        sourceDataAddress:
          type: HttpData
          baseUrl: https://jsonplaceholder.typicode.com/todos
        destinationDataAddress:
          type: HttpData
          baseUrl: https://jsonplaceholder.typicode.com/todos
        callbackAddress: http://control-plane
        properties:
          key: value
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          type: string
          example: DataFlowStartMessage
        agreementId:
          type: string
        callbackAddress:
          type: string
        datasetId:
          type: string
        destinationDataAddress:
          $ref: "#/components/schemas/DataAddress"
        participantId:
          type: string
        processId:
          type: string
        properties:
          $ref: "#/components/schemas/Properties"
        sourceDataAddress:
          $ref: "#/components/schemas/DataAddress"
        transferType:
          type: string
      required:
      - '@context'
      - agreementId
      - datasetId
      - participantId
      - processId
      - properties
      - sourceDataAddress
      - transferType
    DataFlowState:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': DataFlowState
        state: STARTED
      properties:
        '@context':
          type: object
        '@type':
          type: string
          example: DataFlowState
        state:
          type: string
    DataFlowSuspendMessage:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': DataFlowSuspendMessage
        reason: reason
      properties:
        '@type':
          type: string
          example: DataFlowSuspendMessage
        state:
          type: string
    DataFlowTerminateMessage:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': DataFlowTerminateMessage
        reason: reason
      properties:
        '@type':
          type: string
          example: DataFlowTerminateMessage
        state:
          type: string
    DataPlaneInstanceSchema:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': your-dataplane-id
        url: http://somewhere.com:1234/api/v1
        allowedSourceTypes:
        - source-type1
        - source-type2
        allowedDestTypes:
        - your-dest-type
        allowedTransferTypes:
        - transfer-type
        state: AVAILABLE
        stateTimestamp: 1688465655
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/DataPlaneInstance
        allowedDestTypes:
          type: array
          items:
            type: string
          uniqueItems: true
        allowedSourceTypes:
          type: array
          items:
            type: string
          uniqueItems: true
        lastActive:
          type: integer
          format: int64
        state:
          type: string
        stateTimestamp:
          type: integer
          format: int64
        turnCount:
          type: integer
          format: int32
        url:
          type: string
          format: url
      required:
      - '@context'
      - allowedDestTypes
      - allowedSourceTypes
      - url
    Dataset:
      type: object
      description: DCAT dataset
      example:
        '@id': bcca61be-e82e-4da6-bfec-9716a56cef35
        '@type': dcat:Dataset
        odrl:hasPolicy:
          '@id': OGU0ZTMzMGMtODQ2ZS00ZWMxLThmOGQtNWQxNWM0NmI2NmY4:YmNjYTYxYmUtZTgyZS00ZGE2LWJmZWMtOTcxNmE1NmNlZjM1:NDY2ZTZhMmEtNjQ1Yy00ZGQ0LWFlZDktMjdjNGJkZTU4MDNj
          '@type': odrl:Set
          odrl:permission:
            odrl:target: bcca61be-e82e-4da6-bfec-9716a56cef35
            odrl:action:
              odrl:type: http://www.w3.org/ns/odrl/2/use
            odrl:constraint:
              odrl:and:
              - odrl:leftOperand: https://w3id.org/edc/v0.0.1/ns/inForceDate
                odrl:operator:
                  '@id': odrl:gteq
                odrl:rightOperand: 2023-07-07T07:19:58.585601395Z
              - odrl:leftOperand: https://w3id.org/edc/v0.0.1/ns/inForceDate
                odrl:operator:
                  '@id': odrl:lteq
                odrl:rightOperand: 2023-07-12T07:19:58.585601395Z
          odrl:prohibition: []
          odrl:obligation: []
          odrl:target: bcca61be-e82e-4da6-bfec-9716a56cef35
        dcat:distribution:
        - '@type': dcat:Distribution
          dct:format:
            '@id': HttpData
          dcat:accessService: 5e839777-d93e-4785-8972-1005f51cf367
        description: description
        id: bcca61be-e82e-4da6-bfec-9716a56cef35
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
          dct: http://purl.org/dc/terms/
          edc: https://w3id.org/edc/v0.0.1/ns/
          dcat: http://www.w3.org/ns/dcat#
          odrl: http://www.w3.org/ns/odrl/2/
          dspace: https://w3id.org/dspace/v0.8/
    DatasetRequest:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': DatasetRequest
        '@id': dataset-id
        counterPartyAddress: http://counter-party-address
        counterPartyId: counter-party-id
        protocol: dataspace-protocol-http
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/CatalogRequest
        counterPartyAddress:
          type: string
        counterPartyId:
          type: string
        protocol:
          type: string
        querySpec:
          $ref: "#/components/schemas/QuerySpec"
    Duty:
      type: object
      properties:
        action:
          $ref: "#/components/schemas/Action"
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/Constraint"
    EndpointDataReferenceEntry:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': transfer-process-id
        transferProcessId: transfer-process-id
        agreementId: agreement-id
        contractNegotiationId: contract-negotiation-id
        assetId: asset-id
        providerId: provider-id
        createdAt: 1688465655
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/EndpointDataReferenceEntry
    IdResponse:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': id-value
        createdAt: 1688465655
      properties:
        '@id':
          type: string
        createdAt:
          type: integer
          format: int64
    JsonArray:
      type: array
      items:
        $ref: "#/components/schemas/JsonValue"
      properties:
        empty:
          type: boolean
        valueType:
          type: string
          enum:
          - ARRAY
          - OBJECT
          - STRING
          - NUMBER
          - "TRUE"
          - "FALSE"
          - "NULL"
    JsonObject:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/JsonValue"
      properties:
        empty:
          type: boolean
        valueType:
          type: string
          enum:
          - ARRAY
          - OBJECT
          - STRING
          - NUMBER
          - "TRUE"
          - "FALSE"
          - "NULL"
    JsonValue:
      type: object
      properties:
        valueType:
          type: string
          enum:
          - ARRAY
          - OBJECT
          - STRING
          - NUMBER
          - "TRUE"
          - "FALSE"
          - "NULL"
    NegotiationState:
      type: object
      properties:
        state:
          type: string
    Offer:
      type: object
      description: ODRL offer
      example:
        '@context': http://www.w3.org/ns/odrl.jsonld
        '@type': odrl:Offer
        '@id': offer-id
        assigner: providerId
        target: assetId
        permission: []
        prohibition: []
        obligation: []
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: http://www.w3.org/ns/odrl/2/Offer
        assigner:
          type: string
        target:
          type: string
      required:
      - '@id'
      - assigner
      - target
    OperatorDto:
      type: string
      description: Type-Safe ODRL Policy Operator
      enum:
      - EQ
      - NEQ
      - GT
      - GEQ
      - LT
      - LEQ
      - IN
      - HAS_PART
      - IS_A
      - IS_ALL_OF
      - IS_ANY_OF
      - IS_NONE_OF
    Permission:
      type: object
      properties:
        action:
          $ref: "#/components/schemas/Action"
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/Constraint"
        duties:
          type: array
          items:
            $ref: "#/components/schemas/Duty"
    Policy:
      type: object
      properties:
        '@type':
          type: string
          enum:
          - SET
          - OFFER
          - CONTRACT
        assignee:
          type: string
        assigner:
          type: string
        extensibleProperties:
          type: object
          additionalProperties:
            type: object
        inheritsFrom:
          type: string
        obligations:
          type: array
          items:
            $ref: "#/components/schemas/Duty"
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Permission"
        profiles:
          type: array
          items:
            type: string
        prohibitions:
          type: array
          items:
            $ref: "#/components/schemas/Prohibition"
        target:
          type: string
    PolicyDefinitionCreateDto:
      type: object
      description: Create a Policy Definition
      properties:
        expression:
          $ref: "#/components/schemas/UiPolicyExpression"
        policyDefinitionId:
          type: string
          description: Policy Definition ID
      required:
      - expression
      - policyDefinitionId
    PolicyDefinitionDto:
      type: object
      description: Policy Definition as required for the Policy Definition Page
      properties:
        policy:
          $ref: "#/components/schemas/UiPolicy"
        policyDefinitionId:
          type: string
          description: Policy Definition ID
      required:
      - policy
      - policyDefinitionId
    PolicyDefinitionInput:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': definition-id
        policy:
          '@context': http://www.w3.org/ns/odrl.jsonld
          '@type': Set
          uid: http://example.com/policy:1010
          profile: http://example.com/odrl:profile:02
          permission:
          - target: http://example.com/asset:9898.movie
            action: display
            constraint:
            - leftOperand: spatial
              operator: eq
              rightOperand: https://www.wikidata.org/wiki/Q183
              comment: i.e Germany
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/PolicyDefinition
        policy:
          $ref: "#/components/schemas/Policy"
      required:
      - '@context'
      - policy
    PolicyDefinitionOutput:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': definition-id
        policy:
          '@context': http://www.w3.org/ns/odrl.jsonld
          '@type': Set
          uid: http://example.com/policy:1010
          permission:
          - target: http://example.com/asset:9898.movie
            action: display
            constraint:
            - leftOperand: spatial
              operator: eq
              rightOperand: https://www.wikidata.org/wiki/Q183
              comment: i.e Germany
        createdAt: 1688465655
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/PolicyDefinition
        policy:
          $ref: "#/components/schemas/Policy"
    PolicyEvaluationPlanRequestSchema:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': PolicyEvaluationPlanRequest
        policyScope: catalog
      properties:
        policyScope:
          type: string
    PolicyEvaluationPlanSchema:
      type: object
      example:
        '@type': PolicyEvaluationPlan
        preValidators: DcpScopeExtractorFunction
        permissionSteps:
          '@type': PermissionStep
          isFiltered: false
          filteringReasons: []
          ruleFunctions: []
          constraintSteps:
            '@type': AtomicConstraintStep
            isFiltered: true
            filteringReasons:
            - leftOperand 'MembershipCredential' is not bound to scope 'request.catalog'
            - leftOperand 'MembershipCredential' is not bound to any function within
              scope 'request.catalog'
            functionParams:
            - '''MembershipCredential'''
            - EQ
            - '''active'''
          dutySteps: []
        prohibitionSteps: []
        obligationSteps: []
        postValidators: DefaultScopeMappingFunction
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
          edc: https://w3id.org/edc/v0.0.1/ns/
          odrl: http://www.w3.org/ns/odrl/2/
    PolicyValidationResultSchema:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': PolicyValidationResult
        isValid: false
        errors:
        - error1
        - error2
      properties:
        errors:
          type: array
          items:
            type: string
        isValid:
          type: boolean
    Prohibition:
      type: object
      properties:
        action:
          $ref: "#/components/schemas/Action"
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/Constraint"
        remedies:
          type: array
          items:
            $ref: "#/components/schemas/Duty"
    Properties:
      type: object
    QuerySpec:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': QuerySpec
        offset: 5
        limit: 10
        sortOrder: DESC
        sortField: fieldName
        filterExpression: []
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/QuerySpec
        filterExpression:
          type: array
          items:
            $ref: "#/components/schemas/Criterion"
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        sortField:
          type: string
        sortOrder:
          type: string
          enum:
          - ASC
          - DESC
    SelectionRequestSchema:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        source:
          '@type': https://w3id.org/edc/v0.0.1/ns/DataAddress
          type: test-src1
        destination:
          '@type': https://w3id.org/edc/v0.0.1/ns/DataAddress
          type: test-dst2
        strategy: you_custom_strategy
        transferType: you_custom_transfer_type
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/SelectionRequest
        destination:
          $ref: "#/components/schemas/DataAddress"
        source:
          $ref: "#/components/schemas/DataAddress"
        strategy:
          type: string
        transferType:
          type: string
    SuspendTransfer:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/SuspendTransfer
        reason: a reason to suspend
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/SuspendTransfer
        state:
          type: string
    TerminateNegotiationSchema:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/TerminateNegotiation
        '@id': negotiation-id
        reason: a reason to terminate
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/TerminateNegotiation
        reason:
          type: string
    TerminateTransfer:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/TerminateTransfer
        reason: a reason to terminate
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/TerminateTransfer
        state:
          type: string
    TransferProcess:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/TransferProcess
        '@id': process-id
        correlationId: correlation-id
        type: PROVIDER
        state: STARTED
        stateTimestamp: 1688465655
        assetId: asset-id
        contractId: contractId
        dataDestination:
          type: data-destination-type
        privateProperties:
          private-key: private-value
        errorDetail: eventual-error-detail
        createdAt: 1688465655
        callbackAddresses:
        - transactional: false
          uri: http://callback/url
          events:
          - contract.negotiation
          - transfer.process
          authKey: auth-key
          authCodeId: auth-code-id
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/TransferProcess
        callbackAddresses:
          type: array
          items:
            $ref: "#/components/schemas/CallbackAddress"
        contractAgreementId:
          type: string
        counterPartyAddress:
          type: string
        counterPartyId:
          type: string
        dataDestination:
          $ref: "#/components/schemas/DataAddress"
        errorDetail:
          type: string
        privateProperties:
          $ref: "#/components/schemas/Properties"
        protocol:
          type: string
        state:
          type: string
        type:
          type: string
          enum:
          - CONSUMER
          - PROVIDER
    TransferProcessFailStateDto:
      type: object
      properties:
        errorMessage:
          type: string
    TransferRequest:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/TransferRequest
        protocol: dataspace-protocol-http
        counterPartyAddress: http://provider-address
        contractId: contract-id
        transferType: transferType
        dataDestination:
          type: data-destination-type
        privateProperties:
          private-key: private-value
        callbackAddresses:
        - transactional: false
          uri: http://callback/url
          events:
          - contract.negotiation
          - transfer.process
          authKey: auth-key
          authCodeId: auth-code-id
      properties:
        '@context':
          type: object
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/TransferRequest
        assetId:
          type: string
          deprecated: true
        callbackAddresses:
          type: array
          items:
            $ref: "#/components/schemas/CallbackAddress"
        contractId:
          type: string
        counterPartyAddress:
          type: string
        dataDestination:
          $ref: "#/components/schemas/DataAddress"
        privateProperties:
          $ref: "#/components/schemas/Properties"
        protocol:
          type: string
        transferType:
          type: string
      required:
      - '@context'
      - contractId
      - counterPartyAddress
      - protocol
      - transferType
    TransferState:
      type: object
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/TransferState
        state: STARTED
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/TransferState
        state:
          type: string
    UiPolicy:
      type: object
      description: Type-Safe OpenAPI generator friendly ODLR policy subset.
      properties:
        errors:
          type: array
          description: "When trying to reduce the policy JSON-LD to our opinionated\
            \ subset of functionalities, many fields and functionalities are unsupported.\
            \ Should any discrepancies occur during the mapping process, we'll collect\
            \ them here."
          items:
            type: string
            description: "When trying to reduce the policy JSON-LD to our opinionated\
              \ subset of functionalities, many fields and functionalities are unsupported.\
              \ Should any discrepancies occur during the mapping process, we'll collect\
              \ them here."
        expression:
          $ref: "#/components/schemas/UiPolicyExpression"
        policyJsonLd:
          type: string
          description: EDC Policy JSON-LD. This is required because the EDC requires
            the full policy when initiating contract negotiations.
      required:
      - errors
      - policyJsonLd
    UiPolicyConstraint:
      type: object
      description: "ODRL AtomicConstraint. For example 'a EQ b', 'c IN [d, e, f]'"
      properties:
        left:
          type: string
          description: Left side of the expression.
        operator:
          $ref: "#/components/schemas/OperatorDto"
        right:
          $ref: "#/components/schemas/UiPolicyLiteral"
      required:
      - left
      - operator
      - right
    UiPolicyExpression:
      type: object
      description: ODRL constraint
      properties:
        constraint:
          $ref: "#/components/schemas/UiPolicyConstraint"
        expressions:
          type: array
          description: "Only for types AND, OR, XONE. List of sub-expressions to be\
            \ evaluated according to the expressionType."
          items:
            $ref: "#/components/schemas/UiPolicyExpression"
        type:
          $ref: "#/components/schemas/UiPolicyExpressionType"
      required:
      - type
    UiPolicyExpressionType:
      type: string
      description: |
        Ui Policy Expression types:
        * `CONSTRAINT` - Expression 'a=b'
        * `AND` - Conjunction of several expressions. Evaluates to true iff all child expressions are true.
        * `OR` - Disjunction of several expressions. Evaluates to true iff at least one child expression is true.
        * `XONE` - XONE operation. Evaluates to true iff exactly one child expression is true.
      enum:
      - EMPTY
      - CONSTRAINT
      - AND
      - OR
      - XONE
    UiPolicyLiteral:
      type: object
      description: "Sum type: A String, a list of Strings or a generic JSON value."
      properties:
        type:
          $ref: "#/components/schemas/UiPolicyLiteralType"
        value:
          type: string
          description: Only for types STRING and JSON
        valueList:
          type: array
          description: Only for type STRING_LIST
          items:
            type: string
            description: Only for type STRING_LIST
      required:
      - type
    UiPolicyLiteralType:
      type: string
      description: Supported Types of values for the right hand side of an expression
      enum:
      - STRING
      - STRING_LIST
      - JSON
    Vocabulary:
      type: object
      properties:
        category:
          type: string
        connectorId:
          type: string
        createdAt:
          type: integer
          format: int64
        id:
          type: string
        jsonSchema:
          type: string
        name:
          type: string
    VocabularyOutput:
      type: object
      example: |
        {
            "@id": "vocabularyId",
            "name": "vocabulary name",
            "connectorId": "connector-c1",
            "jsonSchema":  "{ \"title\": \"vocabulary\", \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\", \"title\": \"Name\" }, \"dct:keyword\": { \"type\": \"array\", \"title\": \"Keywords\", \"items\": { \"type\": \"string\" } } }, \"required\": [ \"name\" ], \"@context\": { \"dct\": \"http:\/\/purl.org\/dc\/terms\/" } }",
            "category": "dataset"
        }
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/Vocabulary
        jsonSchema:
          type: string
